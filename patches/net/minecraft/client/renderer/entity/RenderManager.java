package net.minecraft.client.renderer.entity;

import com.google.common.collect.Maps;
import java.util.Map;
import javax.annotation.Nullable;
import net.minecraft.block.Block;
import net.minecraft.block.BlockBed;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.Minecraft;
import net.minecraft.client.entity.AbstractClientPlayer;
import net.minecraft.client.gui.FontRenderer;
import net.minecraft.client.renderer.BufferBuilder;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.OpenGlHelper;
import net.minecraft.client.renderer.RenderGlobal;
import net.minecraft.client.renderer.RenderItem;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.culling.ICamera;
import net.minecraft.client.renderer.texture.TextureManager;
import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
import net.minecraft.client.settings.GameSettings;
import net.minecraft.crash.CrashReport;
import net.minecraft.crash.CrashReportCategory;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityAreaEffectCloud;
import net.minecraft.entity.EntityLeashKnot;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.boss.EntityDragon;
import net.minecraft.entity.boss.EntityWither;
import net.minecraft.entity.effect.EntityLightningBolt;
import net.minecraft.entity.item.EntityArmorStand;
import net.minecraft.entity.item.EntityBoat;
import net.minecraft.entity.item.EntityEnderCrystal;
import net.minecraft.entity.item.EntityEnderEye;
import net.minecraft.entity.item.EntityEnderPearl;
import net.minecraft.entity.item.EntityExpBottle;
import net.minecraft.entity.item.EntityFallingBlock;
import net.minecraft.entity.item.EntityFireworkRocket;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.item.EntityItemFrame;
import net.minecraft.entity.item.EntityMinecart;
import net.minecraft.entity.item.EntityMinecartMobSpawner;
import net.minecraft.entity.item.EntityMinecartTNT;
import net.minecraft.entity.item.EntityPainting;
import net.minecraft.entity.item.EntityTNTPrimed;
import net.minecraft.entity.item.EntityXPOrb;
import net.minecraft.entity.monster.EntityBlaze;
import net.minecraft.entity.monster.EntityCaveSpider;
import net.minecraft.entity.monster.EntityCreeper;
import net.minecraft.entity.monster.EntityElderGuardian;
import net.minecraft.entity.monster.EntityEnderman;
import net.minecraft.entity.monster.EntityEndermite;
import net.minecraft.entity.monster.EntityEvoker;
import net.minecraft.entity.monster.EntityGhast;
import net.minecraft.entity.monster.EntityGiantZombie;
import net.minecraft.entity.monster.EntityGuardian;
import net.minecraft.entity.monster.EntityHusk;
import net.minecraft.entity.monster.EntityIllusionIllager;
import net.minecraft.entity.monster.EntityIronGolem;
import net.minecraft.entity.monster.EntityMagmaCube;
import net.minecraft.entity.monster.EntityPigZombie;
import net.minecraft.entity.monster.EntityPolarBear;
import net.minecraft.entity.monster.EntityShulker;
import net.minecraft.entity.monster.EntitySilverfish;
import net.minecraft.entity.monster.EntitySkeleton;
import net.minecraft.entity.monster.EntitySlime;
import net.minecraft.entity.monster.EntitySnowman;
import net.minecraft.entity.monster.EntitySpider;
import net.minecraft.entity.monster.EntityStray;
import net.minecraft.entity.monster.EntityVex;
import net.minecraft.entity.monster.EntityVindicator;
import net.minecraft.entity.monster.EntityWitch;
import net.minecraft.entity.monster.EntityWitherSkeleton;
import net.minecraft.entity.monster.EntityZombie;
import net.minecraft.entity.monster.EntityZombieVillager;
import net.minecraft.entity.passive.EntityBat;
import net.minecraft.entity.passive.EntityChicken;
import net.minecraft.entity.passive.EntityCow;
import net.minecraft.entity.passive.EntityDonkey;
import net.minecraft.entity.passive.EntityHorse;
import net.minecraft.entity.passive.EntityLlama;
import net.minecraft.entity.passive.EntityMooshroom;
import net.minecraft.entity.passive.EntityMule;
import net.minecraft.entity.passive.EntityOcelot;
import net.minecraft.entity.passive.EntityParrot;
import net.minecraft.entity.passive.EntityPig;
import net.minecraft.entity.passive.EntityRabbit;
import net.minecraft.entity.passive.EntitySheep;
import net.minecraft.entity.passive.EntitySkeletonHorse;
import net.minecraft.entity.passive.EntitySquid;
import net.minecraft.entity.passive.EntityVillager;
import net.minecraft.entity.passive.EntityWolf;
import net.minecraft.entity.passive.EntityZombieHorse;
import net.minecraft.entity.projectile.EntityDragonFireball;
import net.minecraft.entity.projectile.EntityEgg;
import net.minecraft.entity.projectile.EntityEvokerFangs;
import net.minecraft.entity.projectile.EntityFishHook;
import net.minecraft.entity.projectile.EntityLargeFireball;
import net.minecraft.entity.projectile.EntityLlamaSpit;
import net.minecraft.entity.projectile.EntityPotion;
import net.minecraft.entity.projectile.EntityShulkerBullet;
import net.minecraft.entity.projectile.EntitySmallFireball;
import net.minecraft.entity.projectile.EntitySnowball;
import net.minecraft.entity.projectile.EntitySpectralArrow;
import net.minecraft.entity.projectile.EntityTippedArrow;
import net.minecraft.entity.projectile.EntityWitherSkull;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.util.ReportedException;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import net.minecraft.world.World;

public class RenderManager {
   private final Map<Class<? extends Entity>, Render<? extends Entity>> entityRenderMap = Maps.newHashMap();
   private final Map<String, RenderPlayer> skinMap = Maps.newHashMap();
   private final RenderPlayer playerRenderer;
   private FontRenderer textRenderer;
   private double renderPosX;
   private double renderPosY;
   private double renderPosZ;
   public TextureManager renderEngine;
   public World world;
   public Entity renderViewEntity;
   public Entity pointedEntity;
   public float playerViewY;
   public float playerViewX;
   public GameSettings options;
   public double viewerPosX;
   public double viewerPosY;
   public double viewerPosZ;
   private boolean renderOutlines;
   private boolean renderShadow = true;
   private boolean debugBoundingBox;

   public RenderManager(TextureManager var1, RenderItem var2) {
      this.renderEngine = â˜ƒ;
      this.entityRenderMap.put(EntityCaveSpider.class, new RenderCaveSpider(this));
      this.entityRenderMap.put(EntitySpider.class, new RenderSpider(this));
      this.entityRenderMap.put(EntityPig.class, new RenderPig(this));
      this.entityRenderMap.put(EntitySheep.class, new RenderSheep(this));
      this.entityRenderMap.put(EntityCow.class, new RenderCow(this));
      this.entityRenderMap.put(EntityMooshroom.class, new RenderMooshroom(this));
      this.entityRenderMap.put(EntityWolf.class, new RenderWolf(this));
      this.entityRenderMap.put(EntityChicken.class, new RenderChicken(this));
      this.entityRenderMap.put(EntityOcelot.class, new RenderOcelot(this));
      this.entityRenderMap.put(EntityRabbit.class, new RenderRabbit(this));
      this.entityRenderMap.put(EntityParrot.class, new RenderParrot(this));
      this.entityRenderMap.put(EntitySilverfish.class, new RenderSilverfish(this));
      this.entityRenderMap.put(EntityEndermite.class, new RenderEndermite(this));
      this.entityRenderMap.put(EntityCreeper.class, new RenderCreeper(this));
      this.entityRenderMap.put(EntityEnderman.class, new RenderEnderman(this));
      this.entityRenderMap.put(EntitySnowman.class, new RenderSnowMan(this));
      this.entityRenderMap.put(EntitySkeleton.class, new RenderSkeleton(this));
      this.entityRenderMap.put(EntityWitherSkeleton.class, new RenderWitherSkeleton(this));
      this.entityRenderMap.put(EntityStray.class, new RenderStray(this));
      this.entityRenderMap.put(EntityWitch.class, new RenderWitch(this));
      this.entityRenderMap.put(EntityBlaze.class, new RenderBlaze(this));
      this.entityRenderMap.put(EntityPigZombie.class, new RenderPigZombie(this));
      this.entityRenderMap.put(EntityZombie.class, new RenderZombie(this));
      this.entityRenderMap.put(EntityZombieVillager.class, new RenderZombieVillager(this));
      this.entityRenderMap.put(EntityHusk.class, new RenderHusk(this));
      this.entityRenderMap.put(EntitySlime.class, new RenderSlime(this));
      this.entityRenderMap.put(EntityMagmaCube.class, new RenderMagmaCube(this));
      this.entityRenderMap.put(EntityGiantZombie.class, new RenderGiantZombie(this, 6.0F));
      this.entityRenderMap.put(EntityGhast.class, new RenderGhast(this));
      this.entityRenderMap.put(EntitySquid.class, new RenderSquid(this));
      this.entityRenderMap.put(EntityVillager.class, new RenderVillager(this));
      this.entityRenderMap.put(EntityIronGolem.class, new RenderIronGolem(this));
      this.entityRenderMap.put(EntityBat.class, new RenderBat(this));
      this.entityRenderMap.put(EntityGuardian.class, new RenderGuardian(this));
      this.entityRenderMap.put(EntityElderGuardian.class, new RenderElderGuardian(this));
      this.entityRenderMap.put(EntityShulker.class, new RenderShulker(this));
      this.entityRenderMap.put(EntityPolarBear.class, new RenderPolarBear(this));
      this.entityRenderMap.put(EntityEvoker.class, new RenderEvoker(this));
      this.entityRenderMap.put(EntityVindicator.class, new RenderVindicator(this));
      this.entityRenderMap.put(EntityVex.class, new RenderVex(this));
      this.entityRenderMap.put(EntityIllusionIllager.class, new RenderIllusionIllager(this));
      this.entityRenderMap.put(EntityDragon.class, new RenderDragon(this));
      this.entityRenderMap.put(EntityEnderCrystal.class, new RenderEnderCrystal(this));
      this.entityRenderMap.put(EntityWither.class, new RenderWither(this));
      this.entityRenderMap.put(Entity.class, new RenderEntity(this));
      this.entityRenderMap.put(EntityPainting.class, new RenderPainting(this));
      this.entityRenderMap.put(EntityItemFrame.class, new RenderItemFrame(this, â˜ƒ));
      this.entityRenderMap.put(EntityLeashKnot.class, new RenderLeashKnot(this));
      this.entityRenderMap.put(EntityTippedArrow.class, new RenderTippedArrow(this));
      this.entityRenderMap.put(EntitySpectralArrow.class, new RenderSpectralArrow(this));
      this.entityRenderMap.put(EntitySnowball.class, new RenderSnowball<>(this, Items.SNOWBALL, â˜ƒ));
      this.entityRenderMap.put(EntityEnderPearl.class, new RenderSnowball<>(this, Items.ENDER_PEARL, â˜ƒ));
      this.entityRenderMap.put(EntityEnderEye.class, new RenderSnowball<>(this, Items.ENDER_EYE, â˜ƒ));
      this.entityRenderMap.put(EntityEgg.class, new RenderSnowball<>(this, Items.EGG, â˜ƒ));
      this.entityRenderMap.put(EntityPotion.class, new RenderPotion(this, â˜ƒ));
      this.entityRenderMap.put(EntityExpBottle.class, new RenderSnowball<>(this, Items.EXPERIENCE_BOTTLE, â˜ƒ));
      this.entityRenderMap.put(EntityFireworkRocket.class, new RenderSnowball<>(this, Items.FIREWORKS, â˜ƒ));
      this.entityRenderMap.put(EntityLargeFireball.class, new RenderFireball(this, 2.0F));
      this.entityRenderMap.put(EntitySmallFireball.class, new RenderFireball(this, 0.5F));
      this.entityRenderMap.put(EntityDragonFireball.class, new RenderDragonFireball(this));
      this.entityRenderMap.put(EntityWitherSkull.class, new RenderWitherSkull(this));
      this.entityRenderMap.put(EntityShulkerBullet.class, new RenderShulkerBullet(this));
      this.entityRenderMap.put(EntityItem.class, new RenderEntityItem(this, â˜ƒ));
      this.entityRenderMap.put(EntityXPOrb.class, new RenderXPOrb(this));
      this.entityRenderMap.put(EntityTNTPrimed.class, new RenderTNTPrimed(this));
      this.entityRenderMap.put(EntityFallingBlock.class, new RenderFallingBlock(this));
      this.entityRenderMap.put(EntityArmorStand.class, new RenderArmorStand(this));
      this.entityRenderMap.put(EntityEvokerFangs.class, new RenderEvokerFangs(this));
      this.entityRenderMap.put(EntityMinecartTNT.class, new RenderTntMinecart(this));
      this.entityRenderMap.put(EntityMinecartMobSpawner.class, new RenderMinecartMobSpawner(this));
      this.entityRenderMap.put(EntityMinecart.class, new RenderMinecart(this));
      this.entityRenderMap.put(EntityBoat.class, new RenderBoat(this));
      this.entityRenderMap.put(EntityFishHook.class, new RenderFish(this));
      this.entityRenderMap.put(EntityAreaEffectCloud.class, new RenderAreaEffectCloud(this));
      this.entityRenderMap.put(EntityHorse.class, new RenderHorse(this));
      this.entityRenderMap.put(EntitySkeletonHorse.class, new RenderAbstractHorse(this));
      this.entityRenderMap.put(EntityZombieHorse.class, new RenderAbstractHorse(this));
      this.entityRenderMap.put(EntityMule.class, new RenderAbstractHorse(this, 0.92F));
      this.entityRenderMap.put(EntityDonkey.class, new RenderAbstractHorse(this, 0.87F));
      this.entityRenderMap.put(EntityLlama.class, new RenderLlama(this));
      this.entityRenderMap.put(EntityLlamaSpit.class, new RenderLlamaSpit(this));
      this.entityRenderMap.put(EntityLightningBolt.class, new RenderLightningBolt(this));
      this.playerRenderer = new RenderPlayer(this);
      this.skinMap.put("default", this.playerRenderer);
      this.skinMap.put("slim", new RenderPlayer(this, true));
   }

   public void setRenderPosition(double var1, double var3, double var5) {
      this.renderPosX = â˜ƒ;
      this.renderPosY = â˜ƒ;
      this.renderPosZ = â˜ƒ;
   }

   public <T extends Entity> Render<T> getEntityClassRenderObject(Class<? extends Entity> var1) {
      Render<? extends Entity> â˜ƒ = this.entityRenderMap.get(â˜ƒ);
      if (â˜ƒ == null && â˜ƒ != Entity.class) {
         â˜ƒ = this.getEntityClassRenderObject((Class<? extends Entity>)â˜ƒ.getSuperclass());
         this.entityRenderMap.put(â˜ƒ, â˜ƒ);
      }

      return (Render<T>)â˜ƒ;
   }

   @Nullable
   public <T extends Entity> Render<T> getEntityRenderObject(Entity var1) {
      if (â˜ƒ instanceof AbstractClientPlayer) {
         String â˜ƒ = ((AbstractClientPlayer)â˜ƒ).getSkinType();
         RenderPlayer â˜ƒx = this.skinMap.get(â˜ƒ);
         return â˜ƒx != null ? â˜ƒx : this.playerRenderer;
      } else {
         return this.getEntityClassRenderObject((Class<? extends Entity>)â˜ƒ.getClass());
      }
   }

   public void cacheActiveRenderInfo(World var1, FontRenderer var2, Entity var3, Entity var4, GameSettings var5, float var6) {
      this.world = â˜ƒ;
      this.options = â˜ƒ;
      this.renderViewEntity = â˜ƒ;
      this.pointedEntity = â˜ƒ;
      this.textRenderer = â˜ƒ;
      if (â˜ƒ instanceof EntityLivingBase && ((EntityLivingBase)â˜ƒ).isPlayerSleeping()) {
         IBlockState â˜ƒ = â˜ƒ.getBlockState(new BlockPos(â˜ƒ));
         Block â˜ƒx = â˜ƒ.getBlock();
         if (â˜ƒx == Blocks.BED) {
            int â˜ƒxx = â˜ƒ.getValue(BlockBed.FACING).getHorizontalIndex();
            this.playerViewY = â˜ƒxx * 90 + 180;
            this.playerViewX = 0.0F;
         }
      } else {
         this.playerViewY = â˜ƒ.prevRotationYaw + (â˜ƒ.rotationYaw - â˜ƒ.prevRotationYaw) * â˜ƒ;
         this.playerViewX = â˜ƒ.prevRotationPitch + (â˜ƒ.rotationPitch - â˜ƒ.prevRotationPitch) * â˜ƒ;
      }

      if (â˜ƒ.thirdPersonView == 2) {
         this.playerViewY += 180.0F;
      }

      this.viewerPosX = â˜ƒ.lastTickPosX + (â˜ƒ.posX - â˜ƒ.lastTickPosX) * â˜ƒ;
      this.viewerPosY = â˜ƒ.lastTickPosY + (â˜ƒ.posY - â˜ƒ.lastTickPosY) * â˜ƒ;
      this.viewerPosZ = â˜ƒ.lastTickPosZ + (â˜ƒ.posZ - â˜ƒ.lastTickPosZ) * â˜ƒ;
   }

   public void setPlayerViewY(float var1) {
      this.playerViewY = â˜ƒ;
   }

   public boolean isRenderShadow() {
      return this.renderShadow;
   }

   public void setRenderShadow(boolean var1) {
      this.renderShadow = â˜ƒ;
   }

   public void setDebugBoundingBox(boolean var1) {
      this.debugBoundingBox = â˜ƒ;
   }

   public boolean isDebugBoundingBox() {
      return this.debugBoundingBox;
   }

   public boolean isRenderMultipass(Entity var1) {
      return this.getEntityRenderObject(â˜ƒ).isMultipass();
   }

   public boolean shouldRender(Entity var1, ICamera var2, double var3, double var5, double var7) {
      Render<Entity> â˜ƒ = this.getEntityRenderObject(â˜ƒ);
      return â˜ƒ != null && â˜ƒ.shouldRender(â˜ƒ, â˜ƒ, â˜ƒ, â˜ƒ, â˜ƒ);
   }

   public void renderEntityStatic(Entity var1, float var2, boolean var3) {
      if (â˜ƒ.ticksExisted == 0) {
         â˜ƒ.lastTickPosX = â˜ƒ.posX;
         â˜ƒ.lastTickPosY = â˜ƒ.posY;
         â˜ƒ.lastTickPosZ = â˜ƒ.posZ;
      }

      double â˜ƒ = â˜ƒ.lastTickPosX + (â˜ƒ.posX - â˜ƒ.lastTickPosX) * â˜ƒ;
      double â˜ƒx = â˜ƒ.lastTickPosY + (â˜ƒ.posY - â˜ƒ.lastTickPosY) * â˜ƒ;
      double â˜ƒxx = â˜ƒ.lastTickPosZ + (â˜ƒ.posZ - â˜ƒ.lastTickPosZ) * â˜ƒ;
      float â˜ƒxxx = â˜ƒ.prevRotationYaw + (â˜ƒ.rotationYaw - â˜ƒ.prevRotationYaw) * â˜ƒ;
      int â˜ƒxxxx = â˜ƒ.getBrightnessForRender();
      if (â˜ƒ.isBurning()) {
         â˜ƒxxxx = 15728880;
      }

      int â˜ƒxxxxx = â˜ƒxxxx % 65536;
      int â˜ƒxxxxxx = â˜ƒxxxx / 65536;
      OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, â˜ƒxxxxx, â˜ƒxxxxxx);
      GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
      this.renderEntity(â˜ƒ, â˜ƒ - this.renderPosX, â˜ƒx - this.renderPosY, â˜ƒxx - this.renderPosZ, â˜ƒxxx, â˜ƒ, â˜ƒ);
   }

   public void renderEntity(Entity var1, double var2, double var4, double var6, float var8, float var9, boolean var10) {
      Render<Entity> â˜ƒ = null;

      try {
         â˜ƒ = this.getEntityRenderObject(â˜ƒ);
         if (â˜ƒ != null && this.renderEngine != null) {
            try {
               â˜ƒ.setRenderOutlines(this.renderOutlines);
               â˜ƒ.doRender(â˜ƒ, â˜ƒ, â˜ƒ, â˜ƒ, â˜ƒ, â˜ƒ);
            } catch (Throwable var17) {
               throw new ReportedException(CrashReport.makeCrashReport(var17, "Rendering entity in world"));
            }

            try {
               if (!this.renderOutlines) {
                  â˜ƒ.doRenderShadowAndFire(â˜ƒ, â˜ƒ, â˜ƒ, â˜ƒ, â˜ƒ, â˜ƒ);
               }
            } catch (Throwable var18) {
               throw new ReportedException(CrashReport.makeCrashReport(var18, "Post-rendering entity in world"));
            }

            if (this.debugBoundingBox && !â˜ƒ.isInvisible() && !â˜ƒ && !Minecraft.getMinecraft().isReducedDebug()) {
               try {
                  this.renderDebugBoundingBox(â˜ƒ, â˜ƒ, â˜ƒ, â˜ƒ, â˜ƒ, â˜ƒ);
               } catch (Throwable var16) {
                  throw new ReportedException(CrashReport.makeCrashReport(var16, "Rendering entity hitbox in world"));
               }
            }
         }
      } catch (Throwable var19) {
         CrashReport â˜ƒx = CrashReport.makeCrashReport(var19, "Rendering entity in world");
         CrashReportCategory â˜ƒxx = â˜ƒx.makeCategory("Entity being rendered");
         â˜ƒ.addEntityCrashInfo(â˜ƒxx);
         CrashReportCategory â˜ƒxxx = â˜ƒx.makeCategory("Renderer details");
         â˜ƒxxx.addCrashSection("Assigned renderer", â˜ƒ);
         â˜ƒxxx.addCrashSection("Location", CrashReportCategory.getCoordinateInfo(â˜ƒ, â˜ƒ, â˜ƒ));
         â˜ƒxxx.addCrashSection("Rotation", â˜ƒ);
         â˜ƒxxx.addCrashSection("Delta", â˜ƒ);
         throw new ReportedException(â˜ƒx);
      }
   }

   public void renderMultipass(Entity var1, float var2) {
      if (â˜ƒ.ticksExisted == 0) {
         â˜ƒ.lastTickPosX = â˜ƒ.posX;
         â˜ƒ.lastTickPosY = â˜ƒ.posY;
         â˜ƒ.lastTickPosZ = â˜ƒ.posZ;
      }

      double â˜ƒ = â˜ƒ.lastTickPosX + (â˜ƒ.posX - â˜ƒ.lastTickPosX) * â˜ƒ;
      double â˜ƒx = â˜ƒ.lastTickPosY + (â˜ƒ.posY - â˜ƒ.lastTickPosY) * â˜ƒ;
      double â˜ƒxx = â˜ƒ.lastTickPosZ + (â˜ƒ.posZ - â˜ƒ.lastTickPosZ) * â˜ƒ;
      float â˜ƒxxx = â˜ƒ.prevRotationYaw + (â˜ƒ.rotationYaw - â˜ƒ.prevRotationYaw) * â˜ƒ;
      int â˜ƒxxxx = â˜ƒ.getBrightnessForRender();
      if (â˜ƒ.isBurning()) {
         â˜ƒxxxx = 15728880;
      }

      int â˜ƒxxxxx = â˜ƒxxxx % 65536;
      int â˜ƒxxxxxx = â˜ƒxxxx / 65536;
      OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, â˜ƒxxxxx, â˜ƒxxxxxx);
      GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
      Render<Entity> â˜ƒxxxxxxx = this.getEntityRenderObject(â˜ƒ);
      if (â˜ƒxxxxxxx != null && this.renderEngine != null) {
         â˜ƒxxxxxxx.renderMultipass(â˜ƒ, â˜ƒ - this.renderPosX, â˜ƒx - this.renderPosY, â˜ƒxx - this.renderPosZ, â˜ƒxxx, â˜ƒ);
      }
   }

   private void renderDebugBoundingBox(Entity var1, double var2, double var4, double var6, float var8, float var9) {
      GlStateManager.depthMask(false);
      GlStateManager.disableTexture2D();
      GlStateManager.disableLighting();
      GlStateManager.disableCull();
      GlStateManager.disableBlend();
      float â˜ƒ = â˜ƒ.width / 2.0F;
      AxisAlignedBB â˜ƒx = â˜ƒ.getEntityBoundingBox();
      RenderGlobal.drawBoundingBox(
         â˜ƒx.minX - â˜ƒ.posX + â˜ƒ,
         â˜ƒx.minY - â˜ƒ.posY + â˜ƒ,
         â˜ƒx.minZ - â˜ƒ.posZ + â˜ƒ,
         â˜ƒx.maxX - â˜ƒ.posX + â˜ƒ,
         â˜ƒx.maxY - â˜ƒ.posY + â˜ƒ,
         â˜ƒx.maxZ - â˜ƒ.posZ + â˜ƒ,
         1.0F,
         1.0F,
         1.0F,
         1.0F
      );
      Entity[] â˜ƒxx = â˜ƒ.getParts();
      if (â˜ƒxx != null) {
         for (Entity â˜ƒxxx : â˜ƒxx) {
            double â˜ƒxxxx = (â˜ƒxxx.posX - â˜ƒxxx.prevPosX) * â˜ƒ;
            double â˜ƒxxxxx = (â˜ƒxxx.posY - â˜ƒxxx.prevPosY) * â˜ƒ;
            double â˜ƒxxxxxx = (â˜ƒxxx.posZ - â˜ƒxxx.prevPosZ) * â˜ƒ;
            AxisAlignedBB â˜ƒxxxxxxx = â˜ƒxxx.getEntityBoundingBox();
            RenderGlobal.drawBoundingBox(
               â˜ƒxxxxxxx.minX - this.renderPosX + â˜ƒxxxx,
               â˜ƒxxxxxxx.minY - this.renderPosY + â˜ƒxxxxx,
               â˜ƒxxxxxxx.minZ - this.renderPosZ + â˜ƒxxxxxx,
               â˜ƒxxxxxxx.maxX - this.renderPosX + â˜ƒxxxx,
               â˜ƒxxxxxxx.maxY - this.renderPosY + â˜ƒxxxxx,
               â˜ƒxxxxxxx.maxZ - this.renderPosZ + â˜ƒxxxxxx,
               0.25F,
               1.0F,
               0.0F,
               1.0F
            );
         }
      }

      if (â˜ƒ instanceof EntityLivingBase) {
         float â˜ƒxxx = 0.01F;
         RenderGlobal.drawBoundingBox(â˜ƒ - â˜ƒ, â˜ƒ + â˜ƒ.getEyeHeight() - 0.01F, â˜ƒ - â˜ƒ, â˜ƒ + â˜ƒ, â˜ƒ + â˜ƒ.getEyeHeight() + 0.01F, â˜ƒ + â˜ƒ, 1.0F, 0.0F, 0.0F, 1.0F);
      }

      Tessellator â˜ƒxxx = Tessellator.getInstance();
      BufferBuilder â˜ƒxxxx = â˜ƒxxx.getBuffer();
      Vec3d â˜ƒxxxxx = â˜ƒ.getLook(â˜ƒ);
      â˜ƒxxxx.begin(3, DefaultVertexFormats.POSITION_COLOR);
      â˜ƒxxxx.pos(â˜ƒ, â˜ƒ + â˜ƒ.getEyeHeight(), â˜ƒ).color(0, 0, 255, 255).endVertex();
      â˜ƒxxxx.pos(â˜ƒ + â˜ƒxxxxx.x * 2.0, â˜ƒ + â˜ƒ.getEyeHeight() + â˜ƒxxxxx.y * 2.0, â˜ƒ + â˜ƒxxxxx.z * 2.0).color(0, 0, 255, 255).endVertex();
      â˜ƒxxx.draw();
      GlStateManager.enableTexture2D();
      GlStateManager.enableLighting();
      GlStateManager.enableCull();
      GlStateManager.disableBlend();
      GlStateManager.depthMask(true);
   }

   public void setWorld(@Nullable World var1) {
      this.world = â˜ƒ;
      if (â˜ƒ == null) {
         this.renderViewEntity = null;
      }
   }

   public double getDistanceToCamera(double var1, double var3, double var5) {
      double â˜ƒ = â˜ƒ - this.viewerPosX;
      double â˜ƒx = â˜ƒ - this.viewerPosY;
      double â˜ƒxx = â˜ƒ - this.viewerPosZ;
      return â˜ƒ * â˜ƒ + â˜ƒx * â˜ƒx + â˜ƒxx * â˜ƒxx;
   }

   public FontRenderer getFontRenderer() {
      return this.textRenderer;
   }

   public void setRenderOutlines(boolean var1) {
      this.renderOutlines = â˜ƒ;
   }
}
